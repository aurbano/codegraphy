/**
 * Generated by orval v6.20.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';

export const getReadRootApiGetMock = () => ({
  version: faker.number.int({ min: undefined, max: undefined }),
});

export const getReadGraphApiGraphsGetMock = () => ({
  cells: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    faker.helpers.arrayElement([
      {
        cell_type: {},
        execution_count: faker.number.int({ min: undefined, max: undefined }),
        execution_time: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          {},
        ]),
        file_name: faker.word.sample(),
        id: faker.word.sample(),
        kernel: faker.word.sample(),
        outputs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => faker.word.sample(),
        ),
        params: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () =>
            faker.helpers.arrayElement([
              faker.word.sample(),
              faker.number.int({ min: undefined, max: undefined }),
            ]),
        ),
        position: {
          x: faker.number.int({ min: undefined, max: undefined }),
          y: faker.number.int({ min: undefined, max: undefined }),
        },
        returns: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () =>
            faker.helpers.arrayElement([
              faker.word.sample(),
              faker.number.int({ min: undefined, max: undefined }),
            ]),
        ),
      },
      {
        label: faker.word.sample(),
        type: faker.helpers.arrayElement(['text', 'number', 'email']),
        value: faker.helpers.arrayElement([
          faker.word.sample(),
          faker.number.int({ min: undefined, max: undefined }),
        ]),
      },
    ]),
  ),
  links: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    from_cell: {
      id: faker.word.sample(),
      port: faker.helpers.arrayElement([
        faker.word.sample(),
        faker.number.int({ min: undefined, max: undefined }),
      ]),
    },
    to_cell: {
      id: faker.word.sample(),
      port: faker.helpers.arrayElement([
        faker.word.sample(),
        faker.number.int({ min: undefined, max: undefined }),
      ]),
    },
  })),
  metadata: {
    graph_version: faker.number.int({ min: undefined, max: undefined }),
    graph_version_minor: faker.number.int({ min: undefined, max: undefined }),
    kernels: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        display_name: faker.word.sample(),
        language: faker.word.sample(),
        name: faker.word.sample(),
      }),
    ),
  },
});

export const getFastAPIMSW = () => [
  http.get('*/api/', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getReadRootApiGetMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/api/graphs/', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getReadGraphApiGraphsGetMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
];
